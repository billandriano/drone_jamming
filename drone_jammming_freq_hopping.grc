options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: freq_hopping
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: bandwidth
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Bandwidth
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 2e6
    step: '10'
    stop: 50e6
    value: var_bandwidth
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 24.0]
    rotation: 0
    state: true
- name: bb_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: BB gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '10'
    step: '10'
    stop: '60'
    value: var_bb_gain
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 16.0]
    rotation: 0
    state: true
- name: freq_hopper
  id: variable
  parameters:
    comment: ''
    value: 100e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 24.0]
    rotation: 0
    state: enabled
- name: if_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: IF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '10'
    step: '10'
    stop: '60'
    value: var_if_gain
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 16.0]
    rotation: 0
    state: true
- name: rf_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '10'
    step: '10'
    stop: '60'
    value: var_rf_gain
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 16.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 456.0]
    rotation: 0
    state: enabled
- name: sample_rate
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Sample rate
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 1e6
    step: '10'
    stop: 20e6
    value: samp_rate
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 16.0]
    rotation: 0
    state: true
- name: var_bandwidth
  id: variable
  parameters:
    comment: ''
    value: 20e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 536.0]
    rotation: 0
    state: enabled
- name: var_bb_gain
  id: variable
  parameters:
    comment: ''
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 368.0]
    rotation: 0
    state: enabled
- name: var_if_gain
  id: variable
  parameters:
    comment: ''
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 152.0]
    rotation: 0
    state: enabled
- name: var_rf_gain
  id: variable
  parameters:
    comment: ''
    value: '60'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 280.0]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_1
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '100'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 256.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import time\nimport pmt\nfrom gnuradio import gr\nimport threading\n\
      \nclass blk(gr.basic_block):\n    def __init__(self, hop_freqs=[100e6, 120e6,\
      \ 150e6], hop_rate=2):\n        gr.basic_block.__init__(self,\n            name='RF\
      \ Freq Hopper Controller',\n            in_sig=None,\n            out_sig=None)\n\
      \        \n        self.hop_freqs = hop_freqs\n        self.hop_rate = hop_rate\n\
      \        self.current_index = 0\n\n        self.message_port_register_out(pmt.intern('cmd'))\n\
      \        self.thread = threading.Thread(target=self.hop_loop)\n        self.thread.daemon\
      \ = True\n        self.thread.start()\n\n    def hop_loop(self):\n        while\
      \ True:\n            freq = self.hop_freqs[self.current_index]\n           \
      \ msg = pmt.cons(pmt.intern(\"freq\"), pmt.from_double(freq))\n            self.message_port_pub(pmt.intern('cmd'),\
      \ msg)\n            self.current_index = (self.current_index + 1) % len(self.hop_freqs)\n\
      \            time.sleep(self.hop_rate)\n"
    affinity: ''
    alias: ''
    comment: ''
    hop_freqs: '[242e7, 244e7, 246e7]'
    hop_rate: '0.5'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('RF Freq Hopper Controller', 'blk', [('hop_freqs', '[100000000.0,
      120000000.0, 150000000.0]'), ('hop_rate', '2')], [], [('cmd', 'message', 1)],
      '', ['hop_freqs', 'hop_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 360.0]
    rotation: 0
    state: enabled
- name: osmosdr_sink_0
  id: osmosdr_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '1'
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: ''
    bb_gain0: bb_gain
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: bandwidth
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    freq0: '0'
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: rf_gain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    if_gain0: if_gain
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: sample_rate
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 404.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: 20e6
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'False'
    plotfreq: 'True'
    plottime: 'False'
    plotwaterfall: 'False'
    rate: '10'
    showports: 'True'
    showrf: 'True'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 240.0]
    rotation: 0
    state: enabled
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: "import threading\nimport time\n\ndef freq_hopper(sink, hop_freqs, hop_rate):\n\
      \    i = 0\n    while True:\n        freq = hop_freqs[i % len(hop_freqs)]\n\
      \        print(f\"Setting freq to {freq/1e6} MHz\")\n        sink.set_center_freq(freq)\n\
      \        i += 1\n        time.sleep(hop_rate)\n\nhop_freqs = [242e7, 244e7,\
      \ 246e7]\nhop_rate = 0.5  # seconds\n\n# Start thread when flowgraph starts\n\
      threading.Thread(target=freq_hopper, args=(self.osmosdr_sink_0, hop_freqs, hop_rate),\
      \ daemon=True).start()"
    comment: ''
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 24.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_1, '0', osmosdr_sink_0, '0']
- [analog_noise_source_x_1, '0', qtgui_sink_x_0, '0']
- [epy_block_0_0, cmd, qtgui_sink_x_0, freq]

metadata:
  file_format: 1
  grc_version: 3.10.10.0
